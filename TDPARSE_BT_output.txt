SonodaMoeto@pc-132-197 Assignment3 % g++ -c TDPARSE_BT_hw_start.cpp -o TDPARSE_BT.o
g++ -c TDPARSE_BT_hw_start.cpp -o TDPARSE_BT.o
SonodaMoeto@pc-132-197 Assignment3 % g++ -c td_bt_tester.cpp
g++ -c td_bt_tester.cpp
SonodaMoeto@pc-132-197 Assignment3 % g++ td_bt_tester.o TDPARSE_BT.o BT_ITEM.o TDPARSE.o PDA.o rules.o -o td_bt_hw_tester
<PARSE_BT.o BT_ITEM.o TDPARSE.o PDA.o rules.o -o td_bt_hw_tester
SonodaMoeto@pc-132-197 Assignment3 % ./td_bt_hw_tester top_down_rule_choice.txt
./td_bt_hw_tester top_down_rule_choice.txt
0:s --> np,vp
1:s --> sadv,s
2:np --> [john]
3:np --> det,n
4:np --> n
5:vp --> iv
6:iv --> [walks]
7:sadv --> [maybe]
8:det --> [the]
9:n --> [man]
10:n --> [men]
initial is s
enter the string to be checked maybe john walks
maybe john walks
input is maybe john walks
WORDS: maybe john walks  STACK: s 
WORDS: maybe john walks  STACK: np vp 
WORDS: maybe john walks  STACK: det n vp 
BACKTRACKING to use of rule: np --> det,n
1 WORDS: maybe john walks STACK: np vp 
WORDS: maybe john walks  STACK: n vp 
BACKTRACKING to use of rule: s --> np,vp
0 WORDS: maybe john walks STACK: s 
WORDS: maybe john walks  STACK: sadv s 
WORDS: john walks  STACK: s 
WORDS: john walks  STACK: np vp 
WORDS: walks  STACK: vp 
WORDS: walks  STACK: iv 
WORDS:  STACK: 
yep
enter the string to be checked 